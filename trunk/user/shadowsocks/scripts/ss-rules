#!/bin/sh
#
# Copyright (C) 2021 GH-X

private_addr="0.0.0.0/8          10.0.0.0/8         100.64.0.0/10      127.0.0.0/8
              169.254.0.0/16     172.16.0.0/12      192.0.0.0/24       192.0.2.0/24
              192.31.196.0/24    192.52.193.0/24    192.88.99.0/24     192.168.0.0/16
              192.175.48.0/24    198.18.0.0/15      198.51.100.0/24    203.0.113.0/24
              224.0.0.0/4        240.0.0.0/4        255.255.255.255/32"

iptn="iptables -t nat"
iptf="iptables -t filter"
iptm="iptables -t mangle"
ipt_n="/tmp/ss-rules_iptables_nat"
ipt_f="/tmp/ss-rules_iptables_filter"
ipt_m="/tmp/ss-rules_iptables_mangle"

routemark="0x64"
ruletable="100"

mcl="-m connlimit --connlimit"
clm="--connlimit-mask 32 --connlimit"
mrl="-m limit --limit"
rlb="--limit-burst"

flush_rules()
{
echo -1000 > /proc/$$/oom_score_adj
iptables-save -c | grep -v -E "SSP_|TPROXY" | iptables-restore -c
ipset destroy servers
ipset destroy private
ipset destroy gfwlist
ipset destroy chnlist
ip route del local default dev lo table $ruletable
ip rule del fwmark $routemark table $ruletable
ip route flush cache
return 0
}

gen_ipset()
{
[ "$agent_mode" == "0" ] && chnhsize="64" || chnhsize="16384"
[ "$agent_mode" == "0" ] && chnmelem="64" || chnmelem="1000000"
ipset -! restore <<-EOF || return 1
  create servers hash:net hashsize 64 maxelem 256
  create private hash:net hashsize 64 maxelem 128
  create gfwlist hash:net hashsize 1024 maxelem 65536
  create chnlist hash:net hashsize $chnhsize maxelem $chnmelem
  $(for privateaddr in $private_addr; do echo "add private $privateaddr"; done)
  $(for blackip in $black_ip; do echo "add gfwlist $blackip"; done)
  $(for whiteip in $white_ip; do echo "add chnlist $whiteip"; done)
  $(cat ${chn_list:=/dev/null} 2>/dev/null | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e "s/^/add chnlist /")
  $(cat ${servers_list:=/dev/null} 2>/dev/null | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e "s/^/add servers /")
EOF
}

ipt_nat()
{
echo "*nat" > $ipt_n
echo ":SSP_AGENT - [0:0]" >> $ipt_n
[ "$agent_mode" == "2" ] && echo ":SSP_AUTOG - [0:0]" >> $ipt_n
[ "$agent_mode" == "2" ] && echo ":SSP_AUTOM - [0:0]" >> $ipt_n
echo ":SSP_OUTPUT - [0:0]" >> $ipt_n
echo ":SSP_PREROUTING - [0:0]" >> $ipt_n
echo ":SSP_RULES - [0:0]" >> $ipt_n
echo "-A PREROUTING -j SSP_PREROUTING" >> $ipt_n
echo "-A OUTPUT -j SSP_OUTPUT" >> $ipt_n
echo "-A SSP_AGENT -p tcp $mcl-upto 256 $clm-saddr -j REDIRECT --to-ports $local_port" >> $ipt_n
echo "-A SSP_AGENT -j RETURN" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOG -p tcp $mcl-upto 256 $clm-saddr $mcl-upto $DR4 $clm-daddr -j SSP_AGENT" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOG -j RETURN" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOM -p tcp $mcl-upto 256 $clm-saddr $mcl-upto $DR2 $clm-daddr $mrl $DR2/sec $rlb $DR2 -j RETURN" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOM -p tcp $mcl-upto 256 $clm-saddr $mcl-upto $DR3 $clm-daddr $mrl $DR3/sec $rlb $DR3 -j SSP_AGENT" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOM -p tcp $mcl-upto 256 $clm-saddr $mcl-upto $DR4 $clm-daddr $mrl $DR4/sec $rlb $DR4 -j RETURN" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_AUTOM -p tcp $mcl-upto 256 $clm-saddr $mcl-above $DR4 $clm-daddr -j SSP_AGENT" >> $ipt_n
echo "-A SSP_OUTPUT -p tcp -m state --state NEW -j SSP_RULES" >> $ipt_n
echo "-A SSP_PREROUTING -p tcp -m state --state NEW -j SSP_RULES" >> $ipt_n
echo "-A SSP_RULES -m set --match-set private dst -j RETURN" >> $ipt_n
echo "-A SSP_RULES -m set --match-set servers dst -j RETURN" >> $ipt_n
[ "$agent_mode" == "1" ] && echo "-A SSP_RULES -m set --match-set gfwlist dst -j SSP_AGENT" >> $ipt_n
[ "$agent_mode" != "0" ] && echo "-A SSP_RULES -m set --match-set chnlist dst -j RETURN" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_RULES -m set --match-set gfwlist dst -j SSP_AUTOG" >> $ipt_n
[ "$agent_mode" != "2" ] && echo "-A SSP_RULES -j SSP_AGENT" >> $ipt_n
[ "$agent_mode" == "2" ] && echo "-A SSP_RULES -j SSP_AUTOM" >> $ipt_n
echo "COMMIT" >> $ipt_n && iptables-restore --noflush < $ipt_n && rm -rf $ipt_n || return 1
}

usage()
{
cat <<-EOF

  ss-rules [选项] [赋值]            [说明]
           -s     <servers_list>    服务器地址列表  IP/CIDR格式
           -i     <local_port>      本地端口        
           -c     <chn_list>        国内路由表      IP/CIDR格式
           -b     <black_ip>        黑名单地址      多个IP/CIDR使用[,]隔开
           -w     <white_ip>        白名单地址      多个IP/CIDR使用[,]隔开
           -a     <agent_mode>      透明代理模式    全局代理[0] 国内路由[1] 黑白名单[2]
                  <diversion_rate>  自动分流        灵敏[1] 准确[2]
           -t                       透明代理协议    TCP[REDIRECT]
           -f                       清除规则        
           -h                       显示帮助        

EOF
exit $1
}

logger -st "SSP[$$]Rules" "任务开始" && \
while getopts ":s:i:c:b:w:a:tmfh" arg; do
  case "$arg" in
    s)
      [ -z "$OPTARG" ] && usage 2
      servers_list="$OPTARG"
      ;;
    i)
      [ -z "$OPTARG" ] && usage 3
      local_port="$OPTARG"
      ;;
    c)
      [ -z "$OPTARG" ] && usage 5
      chn_list="$OPTARG"
      ;;
    b)
      [ -z "$OPTARG" ] && usage 7
      black_ip=$(echo "$OPTARG" | sed 's/,/ /g')
      ;;
    w)
      [ -z "$OPTARG" ] && usage 8
      white_ip=$(echo "$OPTARG" | sed 's/,/ /g')
      ;;
    a)
      [ -z "$OPTARG" ] && usage 9
      agentmode_diversionrate="$OPTARG"
      agent_mode=${agentmode_diversionrate:0:1}
      [ "$agent_mode" == "2" ] && diversion_rate=${agentmode_diversionrate:1:1} && DR1="$diversion_rate" && DR2=$(expr $DR1 \* 2) && DR3=$(expr $DR1 \* 3) && DR4=$(expr $DR1 \* 4)
      ;;
    t)
      flush_rules 2>/dev/null && gen_ipset && ipt_nat
      ;;
    f)
      flush_rules 2>/dev/null
      ;;
    h)
      usage 0
      ;;
  esac
done

EC=$?
[ $EC -eq 0 ] && logger -st "SSP[$$]Rules" "任务成功" || logger -st "SSP[$$]Rules" "任务失败!错误代码:$EC"
exit $EC

